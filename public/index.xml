<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>heckintosh</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on heckintosh</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Malware Reversing: Malicious Word document</title>
      <link>http://localhost:1313/posts/word_malwarereverse/</link>
      <pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/word_malwarereverse/</guid>
      <description>Static analysis We were given a zip: File. First unzip the file, the password is infected. Unzipping the file, there is a Word document. Throwing it into VirusTotal: Analyzing output of oleid: There exists a VBA Macro script in the file. I failed to extract the VBA using olevba (it outputs the whole pdf embedded in the docs for some reasons). Moving on to dynamic analysis now.&#xA;Dynamic Analysis Turn on Process Monitoring then view the doc file in Word.</description>
    </item>
    <item>
      <title>NiteCTF 2023</title>
      <link>http://localhost:1313/competitions/nitectf2023/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/competitions/nitectf2023/</guid>
      <description>Web caas_renewed There is a cowsay service running, it takes user input from the GET URL: /cowsay/{input}. Cleary there is a command injection vulnerability. But there are some filters and also restrictions for the input, I was able to extract the source code of the server using the following payload:&#xA;GET /cowsay/a;cd${IFS}-;cat${IFS}ma* HTTP/1.1 Host: caas.web.nitectf.live Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.199 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.</description>
    </item>
    <item>
      <title>WGMY CTF (Top #15)</title>
      <link>http://localhost:1313/competitions/wargamesmy/</link>
      <pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/competitions/wargamesmy/</guid>
      <description>1. Pwn: Magic Door pwndbg&amp;gt; checksec [*] &amp;#39;/home/kali/CTF/WargamesMy/Pwn/magic-door/challenge/magic_door&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Source&#xD;char *open_the_door() { char s1[12]; // [rsp+0h] [rbp-10h] BYREF int v2; // [rsp+Ch] [rbp-4h] initialize(); puts(&amp;#34;Welcome to the Magic Door !&amp;#34;); printf(&amp;#34;Which door would you like to open? &amp;#34;); __isoc99_scanf(&amp;#34;%11s&amp;#34;, s1); // Enter 050015 here getchar(); if ( !strcmp(s1, &amp;#34;50015&amp;#34;) ) return (char *)no_door_foryou(); v2 = atoi(s1); if ( v2 !</description>
    </item>
    <item>
      <title>Flagyard</title>
      <link>http://localhost:1313/competitions/flagyard/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/competitions/flagyard/</guid>
      <description>Pwn: Babyauth #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; char *secret; __attribute__((noreturn)) void fatal(const char *msg) { printf(&amp;#34;[-] %s\n&amp;#34;, msg); exit(1); } __attribute__((constructor)) void setup(void) { setvbuf(stdin, NULL, _IONBF, 0); setvbuf(stdout, NULL, _IONBF, 0); if (!(secret = getenv(&amp;#34;SECRET&amp;#34;))) fatal(&amp;#34;App secret is not set&amp;#34;); } void getval(const char *msg, long *v) { printf(&amp;#34;%s&amp;#34;, msg); if (scanf(&amp;#34;%ld%*c&amp;#34;, v) != 1) fatal(&amp;#34;I/O Error&amp;#34;); } void getstr(const char *msg, char *s, int len) { printf(&amp;#34;%s&amp;#34;, msg); if (!</description>
    </item>
    <item>
      <title>MACS Web</title>
      <link>http://localhost:1313/competitions/macs_web/</link>
      <pubDate>Sat, 25 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/competitions/macs_web/</guid>
      <description>1. Pea Haych Pee The web reads the page parameter, fetches the file whose filename is the same as page value, and includes it in the response. By sending a random page name that does not exist (locally) in their server, it can be deduced that they are using php include function to add the file content to the response.&#xA;GET /mainsite/?page=test.php HTTP/1.1 Host: chal2.macs.codes:4023 Upgrade-Insecure-Requests: 1 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.</description>
    </item>
    <item>
      <title>MACS Crypto</title>
      <link>http://localhost:1313/competitions/macs_crypto/</link>
      <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/competitions/macs_crypto/</guid>
      <description>1. CYA yfdacyrtcnjrfspucfefdacqi mpbpryfdacfefoejrfspucfef dacqimpbpryfdacyrtcnqereg bprqwwnqermpbprfspmtyrtcn jrfspucfefwnqermpbprfspmt yrtcnjrfspbprqwwnqermpbpr fspmtyrtcnjrfspucfefdacqi tcnbiyfdacyrtcnqeregbprqw dacqimpbpryfdacyrtcnjrfsp ucfefwnqertcnbiyfdacyrtcn qeregucfefdacqitcnbiyfdac yrtcnqeregbprqwwnqertcnbi fspmtyrtcnjrfspbprqwdacqi mpbpryfdacfefoeqeregbprqw wnqermpbpryfdacyrtcnjrfsp bprqwwnqermpbprfspmtfefoe jrfspucfefdacqimpbpryfdac fefoejrfspucfefwnqertcnbi yfdacfefoeqeregucfefdacqi mpbprfspmtyrtcnqeregbprqw wnqermpbprfspmtyrtcnjrfsp bprqwwnqertcnbiyfdacyrtcn jrfspucfefwnqermpbpryfdac fefoejrfspbprqwdacqimpbpr yfdacyrtcnjrfspucfefdacqi mpbpryfdacyrtcnjrfspucfef wnqermpbpryfdacfefoejrfsp ucfefdacqimpbpryfdacfefoe jrfspbprqwwnqermpbpryfdac yrtcnqeregbprqwwnqermpbpr ``&#xA;yfdacyrtcnjrfspucfefdacqi = jrfspucfefwnqermpbprfspmt = . . . . 0 jrfspucfefwnqermpbpryfdac = . . . . 1&#xA;yfdac = 0 yrtcn = 0&#xA;MPBPR&#x9;19×&#x9;12.67%&#x9;YFDAC&#x9;18×&#x9;12%&#x9;YRTCN&#x9;17×&#x9;11.33%&#x9;JRFSP&#x9;17×&#x9;11.33%&#x9;WNQER&#x9;14×&#x9;9.33%&#x9;UCFEF&#x9;13×&#x9;8.</description>
    </item>
    <item>
      <title>MACS Misc</title>
      <link>http://localhost:1313/competitions/macs_misc/</link>
      <pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/competitions/macs_misc/</guid>
      <description>1. Undroppable Table We are given a XLS file.&#xA;FLAG3.xls: Dwell on this a bit and you will realise that you need to place blue as 1, white as 0.&#xA;Write some VBA code in excel to change all blue cells to 1 (gotta know its RGB color first). White cells as 0. Concat all in a row to form a byte. Convert that byte to character. Concat all characters in the column to get a sentence.</description>
    </item>
    <item>
      <title>HACKMAC CTF 2023 (Top #1 Postgrad)</title>
      <link>http://localhost:1313/competitions/hackmac2023/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/competitions/hackmac2023/</guid>
      <description>Binary Exploitation/ Reverse Engineering 1. Game Of Exploits Strings the binary and grep for the flag pattern.&#xA;$ strings GOE | grep HACKMAC HackMac{https://www.youtube.com/watch?v=dQw4w9WgXcQ}&#xA;2. Secret Vault Put the binary into Ghidra for decompiling to readable code. There are three phases that we need to pass.&#xA;Phase 1:&#xA;void phase1(undefined param1) int local_28 [7]; int local_c; read_six_numbers(param_1,(long)local_28); if (local_28[0] &amp;lt; 0) { explode_bomb(); } for (local_c = 1; local_c &amp;lt; 6; local_c = local_c + 1) { if (local_28[local_c] !</description>
    </item>
    <item>
      <title>SECCON CTF 2023 Quals</title>
      <link>http://localhost:1313/competitions/seccon2023/</link>
      <pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/competitions/seccon2023/</guid>
      <description>Did not have time to go in hard with this CTF, but I did try to touch on the pwnable challenges as much as possible. =====Challenge Sources=====&#xA;Pwnable Notes: This is how pwnable challenges should be made, just give the source code instead of making everyone turn on Ghidra.&#xA;1. ROP-2.35 Source For beginner this challenge has some annoying steps that will make you mentally ill. The gist of this one is to overwrite system argument.</description>
    </item>
    <item>
      <title>Works</title>
      <link>http://localhost:1313/whoami/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/whoami/</guid>
      <description>DevOps </description>
    </item>
  </channel>
</rss>
